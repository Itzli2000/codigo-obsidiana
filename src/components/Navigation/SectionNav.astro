---
import { ABOUT_SECTIONS } from "../../constants/aboutSections";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import type { Lang } from "../../types/languaje";

interface Props {
  orientation?: "horizontal" | "vertical";
  className?: string;
}

const { orientation = "horizontal", className = "" } = Astro.props;

const lang = getLangFromUrl(Astro.url) as Lang;
const t = useTranslations(lang);

const menuClass =
  orientation === "vertical"
    ? "flex flex-col gap-3 md:gap-4"
    : "flex flex-row gap-4 md:gap-6";
---

<div class={className}>
  <nav class="flex justify-start pl-4 md:pl-7" aria-label="Section Navigation">
    <ul class={menuClass}>
      {
        ABOUT_SECTIONS({ t }).map(({ id, label }) => (
          <li>
            <a
              href={`#${id}`}
              class="section-link text-sm md:text-base text-base-content/60 hover:text-base-content transition-colors duration-200"
              data-section={id}
              aria-current="false"
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<script>
  class SectionObserver {
    private sectionLinks: NodeListOf<Element>;
    private sections: NodeListOf<Element>;
    private currentSection: string | null = null;
    private isScrolling = false;
    private throttleTimeout: number | null = null;

    constructor() {
      this.sectionLinks = document.querySelectorAll(".section-link");
      this.sections = document.querySelectorAll("section[id]");
      this.init();
    }

    private init(): void {
      setTimeout(() => {
        this.sectionLinks.forEach((link) => {
          link.addEventListener("click", this.handleClick.bind(this));
        });

        window.addEventListener("scroll", this.handleScroll.bind(this));
        this.checkInitialHash();
        this.updateActiveSection();
      }, 100);
    }

    private handleScroll(): void {
      if (this.isScrolling) return;

      if (this.throttleTimeout) {
        clearTimeout(this.throttleTimeout);
      }

      this.throttleTimeout = window.setTimeout(() => {
        this.updateActiveSection();
      }, 100);
    }

    private updateActiveSection(): void {
      const scrollPosition = window.scrollY + window.innerHeight * 0.3;
      let activeSection: string | null = null;

      for (let i = 0; i < this.sections.length; i++) {
        const section = this.sections[i] as HTMLElement;
        const sectionTop = section.offsetTop;
        const sectionBottom = sectionTop + section.offsetHeight;

        if (scrollPosition >= sectionTop && scrollPosition <= sectionBottom) {
          activeSection = section.id;
          break;
        }
      }

      if (!activeSection && this.sections.length > 0) {
        const firstSection = this.sections[0] as HTMLElement;
        if (scrollPosition < firstSection.offsetTop) {
          activeSection = firstSection.id;
        }
      }

      if (activeSection && this.currentSection !== activeSection) {
        this.currentSection = activeSection;
        this.updateActiveLink(activeSection);
        this.updateURL(activeSection);
      }
    }

    private updateActiveLink(sectionId: string): void {
      this.sectionLinks.forEach((link) => {
        link.classList.remove("active");
        link.setAttribute("aria-current", "false");
      });

      const activeLink = document.querySelector(
        `.section-link[data-section="${sectionId}"]`
      );
      if (activeLink) {
        activeLink.classList.add("active");
        activeLink.setAttribute("aria-current", "true");
        console.log(`Active link updated to: ${sectionId}`);
      } else {
        console.warn(`Could not find link for section: ${sectionId}`);
      }
    }

    private updateURL(sectionId: string): void {
      if (window.location.hash !== `#${sectionId}`) {
        history.replaceState(null, "", `#${sectionId}`);
      }
    }

    private handleClick(e: Event): void {
      e.preventDefault();
      const link = e.currentTarget as HTMLAnchorElement;
      const targetId = link.getAttribute("data-section");

      if (!targetId) return;

      const targetSection = document.getElementById(targetId);
      if (!targetSection) return;

      this.isScrolling = true;

      this.updateActiveLink(targetId);
      this.updateURL(targetId);

      targetSection.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });

      setTimeout(() => {
        this.isScrolling = false;
      }, 800);
    }

    private checkInitialHash(): void {
      const hash = window.location.hash.slice(1);
      if (hash) {
        const section = document.getElementById(hash);
        if (section) {
          setTimeout(() => {
            section.scrollIntoView({ block: "start" });
            this.updateActiveLink(hash);
          }, 200);
        }
      } else {
        const firstSection = this.sections[0];
        if (firstSection && firstSection.id) {
          this.updateActiveLink(firstSection.id);
        }
      }
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new SectionObserver();
    });
  } else {
    new SectionObserver();
  }
</script>

<style>
  .section-link {
    position: relative;
    text-decoration: none;
    font-weight: 500;
    padding: 0.25rem 0;
  }

  .section-link::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--color-primary);
    transition: width 0.3s ease;
  }

  .section-link:hover::after {
    width: 100%;
  }

  .section-link.active {
    color: var(--color-primary);
  }

  .section-link.active::after {
    width: 100%;
  }
</style>

