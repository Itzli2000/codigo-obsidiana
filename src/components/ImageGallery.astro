---
import { Icon } from "astro-icon/components";
import { CDN, TYPE } from "../constants/cdn";

interface Props {
  images: string[];
  projectId: string;
  title: string;
}

const { images, projectId, title } = Astro.props;
---

<div class="columns-1 md:columns-2 lg:columns-3 gap-4">
  {images.map((image, index) => (
    <div class="break-inside-avoid mb-4">
      <img
        class="w-full rounded-lg cursor-pointer hover:opacity-90 transition-opacity duration-300 gallery-image"
        src={`${CDN.IMAGES}${TYPE.PROJECT}${projectId}${image}`}
        alt={`${title} - View ${index + 1}`}
        loading="lazy"
        data-index={index}
      />
    </div>
  ))}
</div>

<div id="image-modal" class="modal">
  <div class="modal-box max-w-7xl p-8">
    <button 
      id="close-modal" 
      class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
      aria-label="Close image"
    >
      âœ•
    </button>
    
    <div class="flex items-center justify-center gap-1 md:gap-2 lg:gap-4">
      <button 
        id="prev-image" 
        class="btn btn-ghost btn-square h-1/2 opacity-70 hover:opacity-100"
        aria-label="Previous image"
      >
        <Icon name="mdi:arrow-left" class="w-4 h-4 md:w-6 md:h-6" />
      </button>
      
      <img 
        id="modal-image" 
        class="max-w-full max-h-[80vh] object-contain rounded-lg shadow-2xl"
        alt=""
      />
      
      <button 
        id="next-image" 
        class="btn btn-ghost btn-square h-1/2 opacity-70 hover:opacity-100"
        aria-label="Next image"
      >
        <Icon name="mdi:arrow-right" class="w-4 h-4 md:w-6 md:h-6" />
      </button>
    </div>
  </div>
</div>

<script define:vars={{ images, projectId, title, CDN, TYPE }}>
  class ImageGallery {
    constructor() {
      this.images = images;
      this.projectId = projectId;
      this.title = title;
      this.currentIndex = 0;
      this.modal = document.getElementById('image-modal');
      this.modalImage = document.getElementById('modal-image');
      this.closeBtn = document.getElementById('close-modal');
      this.prevBtn = document.getElementById('prev-image');
      this.nextBtn = document.getElementById('next-image');
      
      this.init();
    }

    init() {
      const galleryImages = document.querySelectorAll('.gallery-image');
      galleryImages.forEach((img, index) => {
        img.addEventListener('click', () => this.openModal(index));
      });

      this.closeBtn?.addEventListener('click', () => this.closeModal());
      this.prevBtn?.addEventListener('click', () => this.prevImage());
      this.nextBtn?.addEventListener('click', () => this.nextImage());

      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.closeModal();
        }
      });

      document.addEventListener('keydown', (e) => {
        if (this.modal?.classList.contains('modal-open')) {
          switch (e.key) {
            case 'Escape':
              this.closeModal();
              break;
            case 'ArrowLeft':
              this.prevImage();
              break;
            case 'ArrowRight':
              this.nextImage();
              break;
          }
        }
      });
    }

    openModal(index) {
      this.currentIndex = index;
      this.updateModalImage();
      this.modal?.classList.add('modal-open');
      document.body.style.overflow = 'hidden';
    }

    closeModal() {
      this.modal?.classList.remove('modal-open');
      document.body.style.overflow = '';
    }

    prevImage() {
      this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;
      this.updateModalImage();
    }

    nextImage() {
      this.currentIndex = (this.currentIndex + 1) % this.images.length;
      this.updateModalImage();
    }

    updateModalImage() {
      const imageSrc = `${CDN.IMAGES}${TYPE.PROJECT}${this.projectId}${this.images[this.currentIndex]}`;
      const imageAlt = `${this.title} - View ${this.currentIndex + 1}`;
      
      if (this.modalImage) {
        this.modalImage.src = imageSrc;
        this.modalImage.alt = imageAlt;
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new ImageGallery();
  });
</script> 