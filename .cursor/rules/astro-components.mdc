---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for structuring and developing Astro components and pages
globs: src/content/**/*.{md,mdx,ts,tsx,astro}
alwaysApply: true
---

# Astro Project Structure and Development Guidelines

1. **Component Structure**: Organize components within `src/components/`, grouping them by feature or domain when appropriate.

2. **Page Routing**: Place all route files in `src/pages/`. Utilize Astro's file-based routing to define site structure.

3. **Layouts**: Store reusable layouts in `src/layouts/`. Use these to maintain consistent page structures across the site.

4. **Styling**: Apply Tailwind CSS classes directly within `.astro` files. Avoid inline styles and external CSS files unless necessary.

5. **Interactivity**: For interactive elements, integrate React components within Astro files using the `client:load` directive.

6. **Accessibility**: Ensure all components are accessible, using semantic HTML and appropriate ARIA attributes.

7. **Naming Conventions**: Use PascalCase for component filenames (e.g., `HeroSection.astro`) and kebab-case for page routes (e.g., `about-us.astro`).

8. **Content Management**: Store markdown content (e.g., blog posts) in `src/content/` and reference them using Astro's content collections.

9. **Asset Organization**: Place static assets like images and icons in the `public/assets/` directory, organizing them by type or feature.

10. **Code Consistency**: Maintain consistent code formatting and structure throughout the project to enhance readability and maintainability.